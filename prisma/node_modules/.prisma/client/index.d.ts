
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/index';
declare const prisma: unique symbol
export type PrismaPromise<A> = Promise<A> & {[prisma]: true}
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model campgrounds
 * 
 */
export type campgrounds = {
  id: number
  user_id: number
  park_name: string
  facility_id: number
  days: number
  start_date: string
  created_at: Date | null
}

/**
 * Model users
 * 
 */
export type users = {
  id: number
  phone: string
  created_at: Date | null
  active: number | null
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Campgrounds
 * const campgrounds = await prisma.campgrounds.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
      /**
       * @private
       */
      private fetcher;
      /**
       * @private
       */
      private readonly dmmf;
      /**
       * @private
       */
      private connectionPromise?;
      /**
       * @private
       */
      private disconnectionPromise?;
      /**
       * @private
       */
      private readonly engineConfig;
      /**
       * @private
       */
      private readonly measurePerformance;

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Campgrounds
   * const campgrounds = await prisma.campgrounds.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends PrismaPromise<any>[]>(arg: [...P]): Promise<UnwrapTuple<P>>;

      /**
   * `prisma.campgrounds`: Exposes CRUD operations for the **campgrounds** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Campgrounds
    * const campgrounds = await prisma.campgrounds.findMany()
    * ```
    */
  get campgrounds(): Prisma.campgroundsDelegate<GlobalReject>;

  /**
   * `prisma.users`: Exposes CRUD operations for the **users** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.users.findMany()
    * ```
    */
  get users(): Prisma.usersDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  /**
   * Prisma Client JS version: 3.9.2
   * Query Engine version: bcc2ff906db47790ee902e7bbc76d7ffb1893009
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: 'DbNull'

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: 'JsonNull'

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: 'AnyNull'

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = {
    [key in keyof T]: T[key] extends false | undefined | null ? never : key
  }[keyof T]

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> = (T | U) extends object ? (Without<T, U> & U) | (Without<U, T> & T) : T | U;


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Buffer
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Exact<A, W = unknown> = 
  W extends unknown ? A extends Narrowable ? Cast<A, W> : Cast<
  {[K in keyof A]: K extends keyof W ? Exact<A[K], W[K]> : never},
  {[K in keyof W]: K extends keyof A ? Exact<A[K], W[K]> : W[K]}>
  : never;

  type Narrowable = string | number | boolean | bigint;

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: Exact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    campgrounds: 'campgrounds',
    users: 'users'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends boolean
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     *  * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your prisma.schema file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'

  /**
   * These options are being passed in to the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined; 
  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UsersCountOutputType
   */


  export type UsersCountOutputType = {
    campgrounds: number
  }

  export type UsersCountOutputTypeSelect = {
    campgrounds?: boolean
  }

  export type UsersCountOutputTypeGetPayload<
    S extends boolean | null | undefined | UsersCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? UsersCountOutputType
    : S extends undefined
    ? never
    : S extends UsersCountOutputTypeArgs
    ?'include' extends U
    ? UsersCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof UsersCountOutputType ?UsersCountOutputType [P]
  : 
     never
  } 
    : UsersCountOutputType
  : UsersCountOutputType




  // Custom InputTypes

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the UsersCountOutputType
     * 
    **/
    select?: UsersCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model campgrounds
   */


  export type AggregateCampgrounds = {
    _count: CampgroundsCountAggregateOutputType | null
    _avg: CampgroundsAvgAggregateOutputType | null
    _sum: CampgroundsSumAggregateOutputType | null
    _min: CampgroundsMinAggregateOutputType | null
    _max: CampgroundsMaxAggregateOutputType | null
  }

  export type CampgroundsAvgAggregateOutputType = {
    id: number | null
    user_id: number | null
    facility_id: number | null
    days: number | null
  }

  export type CampgroundsSumAggregateOutputType = {
    id: number | null
    user_id: number | null
    facility_id: number | null
    days: number | null
  }

  export type CampgroundsMinAggregateOutputType = {
    id: number | null
    user_id: number | null
    park_name: string | null
    facility_id: number | null
    days: number | null
    start_date: string | null
    created_at: Date | null
  }

  export type CampgroundsMaxAggregateOutputType = {
    id: number | null
    user_id: number | null
    park_name: string | null
    facility_id: number | null
    days: number | null
    start_date: string | null
    created_at: Date | null
  }

  export type CampgroundsCountAggregateOutputType = {
    id: number
    user_id: number
    park_name: number
    facility_id: number
    days: number
    start_date: number
    created_at: number
    _all: number
  }


  export type CampgroundsAvgAggregateInputType = {
    id?: true
    user_id?: true
    facility_id?: true
    days?: true
  }

  export type CampgroundsSumAggregateInputType = {
    id?: true
    user_id?: true
    facility_id?: true
    days?: true
  }

  export type CampgroundsMinAggregateInputType = {
    id?: true
    user_id?: true
    park_name?: true
    facility_id?: true
    days?: true
    start_date?: true
    created_at?: true
  }

  export type CampgroundsMaxAggregateInputType = {
    id?: true
    user_id?: true
    park_name?: true
    facility_id?: true
    days?: true
    start_date?: true
    created_at?: true
  }

  export type CampgroundsCountAggregateInputType = {
    id?: true
    user_id?: true
    park_name?: true
    facility_id?: true
    days?: true
    start_date?: true
    created_at?: true
    _all?: true
  }

  export type CampgroundsAggregateArgs = {
    /**
     * Filter which campgrounds to aggregate.
     * 
    **/
    where?: campgroundsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of campgrounds to fetch.
     * 
    **/
    orderBy?: Enumerable<campgroundsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: campgroundsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` campgrounds from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` campgrounds.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned campgrounds
    **/
    _count?: true | CampgroundsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CampgroundsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CampgroundsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CampgroundsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CampgroundsMaxAggregateInputType
  }

  export type GetCampgroundsAggregateType<T extends CampgroundsAggregateArgs> = {
        [P in keyof T & keyof AggregateCampgrounds]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCampgrounds[P]>
      : GetScalarType<T[P], AggregateCampgrounds[P]>
  }




  export type CampgroundsGroupByArgs = {
    where?: campgroundsWhereInput
    orderBy?: Enumerable<campgroundsOrderByWithAggregationInput>
    by: Array<CampgroundsScalarFieldEnum>
    having?: campgroundsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CampgroundsCountAggregateInputType | true
    _avg?: CampgroundsAvgAggregateInputType
    _sum?: CampgroundsSumAggregateInputType
    _min?: CampgroundsMinAggregateInputType
    _max?: CampgroundsMaxAggregateInputType
  }


  export type CampgroundsGroupByOutputType = {
    id: number
    user_id: number
    park_name: string
    facility_id: number
    days: number
    start_date: string
    created_at: Date | null
    _count: CampgroundsCountAggregateOutputType | null
    _avg: CampgroundsAvgAggregateOutputType | null
    _sum: CampgroundsSumAggregateOutputType | null
    _min: CampgroundsMinAggregateOutputType | null
    _max: CampgroundsMaxAggregateOutputType | null
  }

  type GetCampgroundsGroupByPayload<T extends CampgroundsGroupByArgs> = Promise<
    Array<
      PickArray<CampgroundsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CampgroundsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CampgroundsGroupByOutputType[P]>
            : GetScalarType<T[P], CampgroundsGroupByOutputType[P]>
        }
      >
    >


  export type campgroundsSelect = {
    id?: boolean
    user_id?: boolean
    park_name?: boolean
    facility_id?: boolean
    days?: boolean
    start_date?: boolean
    created_at?: boolean
    users?: boolean | usersArgs
  }

  export type campgroundsInclude = {
    users?: boolean | usersArgs
  }

  export type campgroundsGetPayload<
    S extends boolean | null | undefined | campgroundsArgs,
    U = keyof S
      > = S extends true
        ? campgrounds
    : S extends undefined
    ? never
    : S extends campgroundsArgs | campgroundsFindManyArgs
    ?'include' extends U
    ? campgrounds  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'users'
        ? usersGetPayload<S['include'][P]> : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof campgrounds ?campgrounds [P]
  : 
          P extends 'users'
        ? usersGetPayload<S['select'][P]> : never
  } 
    : campgrounds
  : campgrounds


  type campgroundsCountArgs = Merge<
    Omit<campgroundsFindManyArgs, 'select' | 'include'> & {
      select?: CampgroundsCountAggregateInputType | true
    }
  >

  export interface campgroundsDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Campgrounds that matches the filter.
     * @param {campgroundsFindUniqueArgs} args - Arguments to find a Campgrounds
     * @example
     * // Get one Campgrounds
     * const campgrounds = await prisma.campgrounds.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends campgroundsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, campgroundsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'campgrounds'> extends True ? CheckSelect<T, Prisma__campgroundsClient<campgrounds>, Prisma__campgroundsClient<campgroundsGetPayload<T>>> : CheckSelect<T, Prisma__campgroundsClient<campgrounds | null >, Prisma__campgroundsClient<campgroundsGetPayload<T> | null >>

    /**
     * Find the first Campgrounds that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {campgroundsFindFirstArgs} args - Arguments to find a Campgrounds
     * @example
     * // Get one Campgrounds
     * const campgrounds = await prisma.campgrounds.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends campgroundsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, campgroundsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'campgrounds'> extends True ? CheckSelect<T, Prisma__campgroundsClient<campgrounds>, Prisma__campgroundsClient<campgroundsGetPayload<T>>> : CheckSelect<T, Prisma__campgroundsClient<campgrounds | null >, Prisma__campgroundsClient<campgroundsGetPayload<T> | null >>

    /**
     * Find zero or more Campgrounds that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {campgroundsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Campgrounds
     * const campgrounds = await prisma.campgrounds.findMany()
     * 
     * // Get first 10 Campgrounds
     * const campgrounds = await prisma.campgrounds.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const campgroundsWithIdOnly = await prisma.campgrounds.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends campgroundsFindManyArgs>(
      args?: SelectSubset<T, campgroundsFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<campgrounds>>, PrismaPromise<Array<campgroundsGetPayload<T>>>>

    /**
     * Create a Campgrounds.
     * @param {campgroundsCreateArgs} args - Arguments to create a Campgrounds.
     * @example
     * // Create one Campgrounds
     * const Campgrounds = await prisma.campgrounds.create({
     *   data: {
     *     // ... data to create a Campgrounds
     *   }
     * })
     * 
    **/
    create<T extends campgroundsCreateArgs>(
      args: SelectSubset<T, campgroundsCreateArgs>
    ): CheckSelect<T, Prisma__campgroundsClient<campgrounds>, Prisma__campgroundsClient<campgroundsGetPayload<T>>>

    /**
     * Create many Campgrounds.
     *     @param {campgroundsCreateManyArgs} args - Arguments to create many Campgrounds.
     *     @example
     *     // Create many Campgrounds
     *     const campgrounds = await prisma.campgrounds.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends campgroundsCreateManyArgs>(
      args?: SelectSubset<T, campgroundsCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Campgrounds.
     * @param {campgroundsDeleteArgs} args - Arguments to delete one Campgrounds.
     * @example
     * // Delete one Campgrounds
     * const Campgrounds = await prisma.campgrounds.delete({
     *   where: {
     *     // ... filter to delete one Campgrounds
     *   }
     * })
     * 
    **/
    delete<T extends campgroundsDeleteArgs>(
      args: SelectSubset<T, campgroundsDeleteArgs>
    ): CheckSelect<T, Prisma__campgroundsClient<campgrounds>, Prisma__campgroundsClient<campgroundsGetPayload<T>>>

    /**
     * Update one Campgrounds.
     * @param {campgroundsUpdateArgs} args - Arguments to update one Campgrounds.
     * @example
     * // Update one Campgrounds
     * const campgrounds = await prisma.campgrounds.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends campgroundsUpdateArgs>(
      args: SelectSubset<T, campgroundsUpdateArgs>
    ): CheckSelect<T, Prisma__campgroundsClient<campgrounds>, Prisma__campgroundsClient<campgroundsGetPayload<T>>>

    /**
     * Delete zero or more Campgrounds.
     * @param {campgroundsDeleteManyArgs} args - Arguments to filter Campgrounds to delete.
     * @example
     * // Delete a few Campgrounds
     * const { count } = await prisma.campgrounds.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends campgroundsDeleteManyArgs>(
      args?: SelectSubset<T, campgroundsDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Campgrounds.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {campgroundsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Campgrounds
     * const campgrounds = await prisma.campgrounds.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends campgroundsUpdateManyArgs>(
      args: SelectSubset<T, campgroundsUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Campgrounds.
     * @param {campgroundsUpsertArgs} args - Arguments to update or create a Campgrounds.
     * @example
     * // Update or create a Campgrounds
     * const campgrounds = await prisma.campgrounds.upsert({
     *   create: {
     *     // ... data to create a Campgrounds
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Campgrounds we want to update
     *   }
     * })
    **/
    upsert<T extends campgroundsUpsertArgs>(
      args: SelectSubset<T, campgroundsUpsertArgs>
    ): CheckSelect<T, Prisma__campgroundsClient<campgrounds>, Prisma__campgroundsClient<campgroundsGetPayload<T>>>

    /**
     * Count the number of Campgrounds.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {campgroundsCountArgs} args - Arguments to filter Campgrounds to count.
     * @example
     * // Count the number of Campgrounds
     * const count = await prisma.campgrounds.count({
     *   where: {
     *     // ... the filter for the Campgrounds we want to count
     *   }
     * })
    **/
    count<T extends campgroundsCountArgs>(
      args?: Subset<T, campgroundsCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CampgroundsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Campgrounds.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CampgroundsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CampgroundsAggregateArgs>(args: Subset<T, CampgroundsAggregateArgs>): PrismaPromise<GetCampgroundsAggregateType<T>>

    /**
     * Group by Campgrounds.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CampgroundsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CampgroundsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CampgroundsGroupByArgs['orderBy'] }
        : { orderBy?: CampgroundsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CampgroundsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCampgroundsGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for campgrounds.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__campgroundsClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    users<T extends usersArgs = {}>(args?: Subset<T, usersArgs>): CheckSelect<T, Prisma__usersClient<users | null >, Prisma__usersClient<usersGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * campgrounds findUnique
   */
  export type campgroundsFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the campgrounds
     * 
    **/
    select?: campgroundsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: campgroundsInclude | null
    /**
     * Throw an Error if a campgrounds can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which campgrounds to fetch.
     * 
    **/
    where: campgroundsWhereUniqueInput
  }


  /**
   * campgrounds findFirst
   */
  export type campgroundsFindFirstArgs = {
    /**
     * Select specific fields to fetch from the campgrounds
     * 
    **/
    select?: campgroundsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: campgroundsInclude | null
    /**
     * Throw an Error if a campgrounds can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which campgrounds to fetch.
     * 
    **/
    where?: campgroundsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of campgrounds to fetch.
     * 
    **/
    orderBy?: Enumerable<campgroundsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for campgrounds.
     * 
    **/
    cursor?: campgroundsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` campgrounds from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` campgrounds.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of campgrounds.
     * 
    **/
    distinct?: Enumerable<CampgroundsScalarFieldEnum>
  }


  /**
   * campgrounds findMany
   */
  export type campgroundsFindManyArgs = {
    /**
     * Select specific fields to fetch from the campgrounds
     * 
    **/
    select?: campgroundsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: campgroundsInclude | null
    /**
     * Filter, which campgrounds to fetch.
     * 
    **/
    where?: campgroundsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of campgrounds to fetch.
     * 
    **/
    orderBy?: Enumerable<campgroundsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing campgrounds.
     * 
    **/
    cursor?: campgroundsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` campgrounds from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` campgrounds.
     * 
    **/
    skip?: number
    distinct?: Enumerable<CampgroundsScalarFieldEnum>
  }


  /**
   * campgrounds create
   */
  export type campgroundsCreateArgs = {
    /**
     * Select specific fields to fetch from the campgrounds
     * 
    **/
    select?: campgroundsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: campgroundsInclude | null
    /**
     * The data needed to create a campgrounds.
     * 
    **/
    data: XOR<campgroundsCreateInput, campgroundsUncheckedCreateInput>
  }


  /**
   * campgrounds createMany
   */
  export type campgroundsCreateManyArgs = {
    /**
     * The data used to create many campgrounds.
     * 
    **/
    data: Enumerable<campgroundsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * campgrounds update
   */
  export type campgroundsUpdateArgs = {
    /**
     * Select specific fields to fetch from the campgrounds
     * 
    **/
    select?: campgroundsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: campgroundsInclude | null
    /**
     * The data needed to update a campgrounds.
     * 
    **/
    data: XOR<campgroundsUpdateInput, campgroundsUncheckedUpdateInput>
    /**
     * Choose, which campgrounds to update.
     * 
    **/
    where: campgroundsWhereUniqueInput
  }


  /**
   * campgrounds updateMany
   */
  export type campgroundsUpdateManyArgs = {
    /**
     * The data used to update campgrounds.
     * 
    **/
    data: XOR<campgroundsUpdateManyMutationInput, campgroundsUncheckedUpdateManyInput>
    /**
     * Filter which campgrounds to update
     * 
    **/
    where?: campgroundsWhereInput
  }


  /**
   * campgrounds upsert
   */
  export type campgroundsUpsertArgs = {
    /**
     * Select specific fields to fetch from the campgrounds
     * 
    **/
    select?: campgroundsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: campgroundsInclude | null
    /**
     * The filter to search for the campgrounds to update in case it exists.
     * 
    **/
    where: campgroundsWhereUniqueInput
    /**
     * In case the campgrounds found by the `where` argument doesn't exist, create a new campgrounds with this data.
     * 
    **/
    create: XOR<campgroundsCreateInput, campgroundsUncheckedCreateInput>
    /**
     * In case the campgrounds was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<campgroundsUpdateInput, campgroundsUncheckedUpdateInput>
  }


  /**
   * campgrounds delete
   */
  export type campgroundsDeleteArgs = {
    /**
     * Select specific fields to fetch from the campgrounds
     * 
    **/
    select?: campgroundsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: campgroundsInclude | null
    /**
     * Filter which campgrounds to delete.
     * 
    **/
    where: campgroundsWhereUniqueInput
  }


  /**
   * campgrounds deleteMany
   */
  export type campgroundsDeleteManyArgs = {
    /**
     * Filter which campgrounds to delete
     * 
    **/
    where?: campgroundsWhereInput
  }


  /**
   * campgrounds without action
   */
  export type campgroundsArgs = {
    /**
     * Select specific fields to fetch from the campgrounds
     * 
    **/
    select?: campgroundsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: campgroundsInclude | null
  }



  /**
   * Model users
   */


  export type AggregateUsers = {
    _count: UsersCountAggregateOutputType | null
    _avg: UsersAvgAggregateOutputType | null
    _sum: UsersSumAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  export type UsersAvgAggregateOutputType = {
    id: number | null
    active: number | null
  }

  export type UsersSumAggregateOutputType = {
    id: number | null
    active: number | null
  }

  export type UsersMinAggregateOutputType = {
    id: number | null
    phone: string | null
    created_at: Date | null
    active: number | null
  }

  export type UsersMaxAggregateOutputType = {
    id: number | null
    phone: string | null
    created_at: Date | null
    active: number | null
  }

  export type UsersCountAggregateOutputType = {
    id: number
    phone: number
    created_at: number
    active: number
    _all: number
  }


  export type UsersAvgAggregateInputType = {
    id?: true
    active?: true
  }

  export type UsersSumAggregateInputType = {
    id?: true
    active?: true
  }

  export type UsersMinAggregateInputType = {
    id?: true
    phone?: true
    created_at?: true
    active?: true
  }

  export type UsersMaxAggregateInputType = {
    id?: true
    phone?: true
    created_at?: true
    active?: true
  }

  export type UsersCountAggregateInputType = {
    id?: true
    phone?: true
    created_at?: true
    active?: true
    _all?: true
  }

  export type UsersAggregateArgs = {
    /**
     * Filter which users to aggregate.
     * 
    **/
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     * 
    **/
    orderBy?: Enumerable<usersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned users
    **/
    _count?: true | UsersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UsersAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UsersSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UsersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UsersMaxAggregateInputType
  }

  export type GetUsersAggregateType<T extends UsersAggregateArgs> = {
        [P in keyof T & keyof AggregateUsers]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsers[P]>
      : GetScalarType<T[P], AggregateUsers[P]>
  }




  export type UsersGroupByArgs = {
    where?: usersWhereInput
    orderBy?: Enumerable<usersOrderByWithAggregationInput>
    by: Array<UsersScalarFieldEnum>
    having?: usersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UsersCountAggregateInputType | true
    _avg?: UsersAvgAggregateInputType
    _sum?: UsersSumAggregateInputType
    _min?: UsersMinAggregateInputType
    _max?: UsersMaxAggregateInputType
  }


  export type UsersGroupByOutputType = {
    id: number
    phone: string
    created_at: Date | null
    active: number | null
    _count: UsersCountAggregateOutputType | null
    _avg: UsersAvgAggregateOutputType | null
    _sum: UsersSumAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  type GetUsersGroupByPayload<T extends UsersGroupByArgs> = Promise<
    Array<
      PickArray<UsersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UsersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UsersGroupByOutputType[P]>
            : GetScalarType<T[P], UsersGroupByOutputType[P]>
        }
      >
    >


  export type usersSelect = {
    id?: boolean
    phone?: boolean
    created_at?: boolean
    active?: boolean
    campgrounds?: boolean | campgroundsFindManyArgs
    _count?: boolean | UsersCountOutputTypeArgs
  }

  export type usersInclude = {
    campgrounds?: boolean | campgroundsFindManyArgs
    _count?: boolean | UsersCountOutputTypeArgs
  }

  export type usersGetPayload<
    S extends boolean | null | undefined | usersArgs,
    U = keyof S
      > = S extends true
        ? users
    : S extends undefined
    ? never
    : S extends usersArgs | usersFindManyArgs
    ?'include' extends U
    ? users  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'campgrounds'
        ? Array < campgroundsGetPayload<S['include'][P]>>  :
        P extends '_count'
        ? UsersCountOutputTypeGetPayload<S['include'][P]> : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof users ?users [P]
  : 
          P extends 'campgrounds'
        ? Array < campgroundsGetPayload<S['select'][P]>>  :
        P extends '_count'
        ? UsersCountOutputTypeGetPayload<S['select'][P]> : never
  } 
    : users
  : users


  type usersCountArgs = Merge<
    Omit<usersFindManyArgs, 'select' | 'include'> & {
      select?: UsersCountAggregateInputType | true
    }
  >

  export interface usersDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Users that matches the filter.
     * @param {usersFindUniqueArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends usersFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, usersFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'users'> extends True ? CheckSelect<T, Prisma__usersClient<users>, Prisma__usersClient<usersGetPayload<T>>> : CheckSelect<T, Prisma__usersClient<users | null >, Prisma__usersClient<usersGetPayload<T> | null >>

    /**
     * Find the first Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersFindFirstArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends usersFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, usersFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'users'> extends True ? CheckSelect<T, Prisma__usersClient<users>, Prisma__usersClient<usersGetPayload<T>>> : CheckSelect<T, Prisma__usersClient<users | null >, Prisma__usersClient<usersGetPayload<T> | null >>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.users.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.users.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const usersWithIdOnly = await prisma.users.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends usersFindManyArgs>(
      args?: SelectSubset<T, usersFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<users>>, PrismaPromise<Array<usersGetPayload<T>>>>

    /**
     * Create a Users.
     * @param {usersCreateArgs} args - Arguments to create a Users.
     * @example
     * // Create one Users
     * const Users = await prisma.users.create({
     *   data: {
     *     // ... data to create a Users
     *   }
     * })
     * 
    **/
    create<T extends usersCreateArgs>(
      args: SelectSubset<T, usersCreateArgs>
    ): CheckSelect<T, Prisma__usersClient<users>, Prisma__usersClient<usersGetPayload<T>>>

    /**
     * Create many Users.
     *     @param {usersCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const users = await prisma.users.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends usersCreateManyArgs>(
      args?: SelectSubset<T, usersCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Users.
     * @param {usersDeleteArgs} args - Arguments to delete one Users.
     * @example
     * // Delete one Users
     * const Users = await prisma.users.delete({
     *   where: {
     *     // ... filter to delete one Users
     *   }
     * })
     * 
    **/
    delete<T extends usersDeleteArgs>(
      args: SelectSubset<T, usersDeleteArgs>
    ): CheckSelect<T, Prisma__usersClient<users>, Prisma__usersClient<usersGetPayload<T>>>

    /**
     * Update one Users.
     * @param {usersUpdateArgs} args - Arguments to update one Users.
     * @example
     * // Update one Users
     * const users = await prisma.users.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends usersUpdateArgs>(
      args: SelectSubset<T, usersUpdateArgs>
    ): CheckSelect<T, Prisma__usersClient<users>, Prisma__usersClient<usersGetPayload<T>>>

    /**
     * Delete zero or more Users.
     * @param {usersDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.users.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends usersDeleteManyArgs>(
      args?: SelectSubset<T, usersDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const users = await prisma.users.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends usersUpdateManyArgs>(
      args: SelectSubset<T, usersUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Users.
     * @param {usersUpsertArgs} args - Arguments to update or create a Users.
     * @example
     * // Update or create a Users
     * const users = await prisma.users.upsert({
     *   create: {
     *     // ... data to create a Users
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Users we want to update
     *   }
     * })
    **/
    upsert<T extends usersUpsertArgs>(
      args: SelectSubset<T, usersUpsertArgs>
    ): CheckSelect<T, Prisma__usersClient<users>, Prisma__usersClient<usersGetPayload<T>>>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.users.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends usersCountArgs>(
      args?: Subset<T, usersCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsersAggregateArgs>(args: Subset<T, UsersAggregateArgs>): PrismaPromise<GetUsersAggregateType<T>>

    /**
     * Group by Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UsersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UsersGroupByArgs['orderBy'] }
        : { orderBy?: UsersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UsersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsersGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for users.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__usersClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    campgrounds<T extends campgroundsFindManyArgs = {}>(args?: Subset<T, campgroundsFindManyArgs>): CheckSelect<T, PrismaPromise<Array<campgrounds>>, PrismaPromise<Array<campgroundsGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * users findUnique
   */
  export type usersFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the users
     * 
    **/
    select?: usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: usersInclude | null
    /**
     * Throw an Error if a users can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which users to fetch.
     * 
    **/
    where: usersWhereUniqueInput
  }


  /**
   * users findFirst
   */
  export type usersFindFirstArgs = {
    /**
     * Select specific fields to fetch from the users
     * 
    **/
    select?: usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: usersInclude | null
    /**
     * Throw an Error if a users can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which users to fetch.
     * 
    **/
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     * 
    **/
    orderBy?: Enumerable<usersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
     * 
    **/
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
     * 
    **/
    distinct?: Enumerable<UsersScalarFieldEnum>
  }


  /**
   * users findMany
   */
  export type usersFindManyArgs = {
    /**
     * Select specific fields to fetch from the users
     * 
    **/
    select?: usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: usersInclude | null
    /**
     * Filter, which users to fetch.
     * 
    **/
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     * 
    **/
    orderBy?: Enumerable<usersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing users.
     * 
    **/
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     * 
    **/
    skip?: number
    distinct?: Enumerable<UsersScalarFieldEnum>
  }


  /**
   * users create
   */
  export type usersCreateArgs = {
    /**
     * Select specific fields to fetch from the users
     * 
    **/
    select?: usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: usersInclude | null
    /**
     * The data needed to create a users.
     * 
    **/
    data: XOR<usersCreateInput, usersUncheckedCreateInput>
  }


  /**
   * users createMany
   */
  export type usersCreateManyArgs = {
    /**
     * The data used to create many users.
     * 
    **/
    data: Enumerable<usersCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * users update
   */
  export type usersUpdateArgs = {
    /**
     * Select specific fields to fetch from the users
     * 
    **/
    select?: usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: usersInclude | null
    /**
     * The data needed to update a users.
     * 
    **/
    data: XOR<usersUpdateInput, usersUncheckedUpdateInput>
    /**
     * Choose, which users to update.
     * 
    **/
    where: usersWhereUniqueInput
  }


  /**
   * users updateMany
   */
  export type usersUpdateManyArgs = {
    /**
     * The data used to update users.
     * 
    **/
    data: XOR<usersUpdateManyMutationInput, usersUncheckedUpdateManyInput>
    /**
     * Filter which users to update
     * 
    **/
    where?: usersWhereInput
  }


  /**
   * users upsert
   */
  export type usersUpsertArgs = {
    /**
     * Select specific fields to fetch from the users
     * 
    **/
    select?: usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: usersInclude | null
    /**
     * The filter to search for the users to update in case it exists.
     * 
    **/
    where: usersWhereUniqueInput
    /**
     * In case the users found by the `where` argument doesn't exist, create a new users with this data.
     * 
    **/
    create: XOR<usersCreateInput, usersUncheckedCreateInput>
    /**
     * In case the users was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<usersUpdateInput, usersUncheckedUpdateInput>
  }


  /**
   * users delete
   */
  export type usersDeleteArgs = {
    /**
     * Select specific fields to fetch from the users
     * 
    **/
    select?: usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: usersInclude | null
    /**
     * Filter which users to delete.
     * 
    **/
    where: usersWhereUniqueInput
  }


  /**
   * users deleteMany
   */
  export type usersDeleteManyArgs = {
    /**
     * Filter which users to delete
     * 
    **/
    where?: usersWhereInput
  }


  /**
   * users without action
   */
  export type usersArgs = {
    /**
     * Select specific fields to fetch from the users
     * 
    **/
    select?: usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: usersInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const CampgroundsScalarFieldEnum: {
    id: 'id',
    user_id: 'user_id',
    park_name: 'park_name',
    facility_id: 'facility_id',
    days: 'days',
    start_date: 'start_date',
    created_at: 'created_at'
  };

  export type CampgroundsScalarFieldEnum = (typeof CampgroundsScalarFieldEnum)[keyof typeof CampgroundsScalarFieldEnum]


  export const UsersScalarFieldEnum: {
    id: 'id',
    phone: 'phone',
    created_at: 'created_at',
    active: 'active'
  };

  export type UsersScalarFieldEnum = (typeof UsersScalarFieldEnum)[keyof typeof UsersScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  /**
   * Deep Input Types
   */


  export type campgroundsWhereInput = {
    AND?: Enumerable<campgroundsWhereInput>
    OR?: Enumerable<campgroundsWhereInput>
    NOT?: Enumerable<campgroundsWhereInput>
    id?: IntFilter | number
    user_id?: IntFilter | number
    park_name?: StringFilter | string
    facility_id?: IntFilter | number
    days?: IntFilter | number
    start_date?: StringFilter | string
    created_at?: DateTimeNullableFilter | Date | string | null
    users?: XOR<UsersRelationFilter, usersWhereInput>
  }

  export type campgroundsOrderByWithRelationInput = {
    id?: SortOrder
    user_id?: SortOrder
    park_name?: SortOrder
    facility_id?: SortOrder
    days?: SortOrder
    start_date?: SortOrder
    created_at?: SortOrder
    users?: usersOrderByWithRelationInput
  }

  export type campgroundsWhereUniqueInput = {
    id?: number
  }

  export type campgroundsOrderByWithAggregationInput = {
    id?: SortOrder
    user_id?: SortOrder
    park_name?: SortOrder
    facility_id?: SortOrder
    days?: SortOrder
    start_date?: SortOrder
    created_at?: SortOrder
    _count?: campgroundsCountOrderByAggregateInput
    _avg?: campgroundsAvgOrderByAggregateInput
    _max?: campgroundsMaxOrderByAggregateInput
    _min?: campgroundsMinOrderByAggregateInput
    _sum?: campgroundsSumOrderByAggregateInput
  }

  export type campgroundsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<campgroundsScalarWhereWithAggregatesInput>
    OR?: Enumerable<campgroundsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<campgroundsScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    user_id?: IntWithAggregatesFilter | number
    park_name?: StringWithAggregatesFilter | string
    facility_id?: IntWithAggregatesFilter | number
    days?: IntWithAggregatesFilter | number
    start_date?: StringWithAggregatesFilter | string
    created_at?: DateTimeNullableWithAggregatesFilter | Date | string | null
  }

  export type usersWhereInput = {
    AND?: Enumerable<usersWhereInput>
    OR?: Enumerable<usersWhereInput>
    NOT?: Enumerable<usersWhereInput>
    id?: IntFilter | number
    phone?: StringFilter | string
    created_at?: DateTimeNullableFilter | Date | string | null
    active?: IntNullableFilter | number | null
    campgrounds?: CampgroundsListRelationFilter
  }

  export type usersOrderByWithRelationInput = {
    id?: SortOrder
    phone?: SortOrder
    created_at?: SortOrder
    active?: SortOrder
    campgrounds?: campgroundsOrderByRelationAggregateInput
  }

  export type usersWhereUniqueInput = {
    id?: number
    phone?: string
  }

  export type usersOrderByWithAggregationInput = {
    id?: SortOrder
    phone?: SortOrder
    created_at?: SortOrder
    active?: SortOrder
    _count?: usersCountOrderByAggregateInput
    _avg?: usersAvgOrderByAggregateInput
    _max?: usersMaxOrderByAggregateInput
    _min?: usersMinOrderByAggregateInput
    _sum?: usersSumOrderByAggregateInput
  }

  export type usersScalarWhereWithAggregatesInput = {
    AND?: Enumerable<usersScalarWhereWithAggregatesInput>
    OR?: Enumerable<usersScalarWhereWithAggregatesInput>
    NOT?: Enumerable<usersScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    phone?: StringWithAggregatesFilter | string
    created_at?: DateTimeNullableWithAggregatesFilter | Date | string | null
    active?: IntNullableWithAggregatesFilter | number | null
  }

  export type campgroundsCreateInput = {
    park_name: string
    facility_id: number
    days: number
    start_date: string
    created_at?: Date | string | null
    users: usersCreateNestedOneWithoutCampgroundsInput
  }

  export type campgroundsUncheckedCreateInput = {
    id?: number
    user_id: number
    park_name: string
    facility_id: number
    days: number
    start_date: string
    created_at?: Date | string | null
  }

  export type campgroundsUpdateInput = {
    park_name?: StringFieldUpdateOperationsInput | string
    facility_id?: IntFieldUpdateOperationsInput | number
    days?: IntFieldUpdateOperationsInput | number
    start_date?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    users?: usersUpdateOneRequiredWithoutCampgroundsInput
  }

  export type campgroundsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    park_name?: StringFieldUpdateOperationsInput | string
    facility_id?: IntFieldUpdateOperationsInput | number
    days?: IntFieldUpdateOperationsInput | number
    start_date?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type campgroundsCreateManyInput = {
    id?: number
    user_id: number
    park_name: string
    facility_id: number
    days: number
    start_date: string
    created_at?: Date | string | null
  }

  export type campgroundsUpdateManyMutationInput = {
    park_name?: StringFieldUpdateOperationsInput | string
    facility_id?: IntFieldUpdateOperationsInput | number
    days?: IntFieldUpdateOperationsInput | number
    start_date?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type campgroundsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    park_name?: StringFieldUpdateOperationsInput | string
    facility_id?: IntFieldUpdateOperationsInput | number
    days?: IntFieldUpdateOperationsInput | number
    start_date?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type usersCreateInput = {
    phone: string
    created_at?: Date | string | null
    active?: number | null
    campgrounds?: campgroundsCreateNestedManyWithoutUsersInput
  }

  export type usersUncheckedCreateInput = {
    id?: number
    phone: string
    created_at?: Date | string | null
    active?: number | null
    campgrounds?: campgroundsUncheckedCreateNestedManyWithoutUsersInput
  }

  export type usersUpdateInput = {
    phone?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    active?: NullableIntFieldUpdateOperationsInput | number | null
    campgrounds?: campgroundsUpdateManyWithoutUsersInput
  }

  export type usersUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    phone?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    active?: NullableIntFieldUpdateOperationsInput | number | null
    campgrounds?: campgroundsUncheckedUpdateManyWithoutUsersInput
  }

  export type usersCreateManyInput = {
    id?: number
    phone: string
    created_at?: Date | string | null
    active?: number | null
  }

  export type usersUpdateManyMutationInput = {
    phone?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    active?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type usersUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    phone?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    active?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringFilter | string
  }

  export type DateTimeNullableFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableFilter | Date | string | null
  }

  export type UsersRelationFilter = {
    is?: usersWhereInput
    isNot?: usersWhereInput
  }

  export type campgroundsCountOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    park_name?: SortOrder
    facility_id?: SortOrder
    days?: SortOrder
    start_date?: SortOrder
    created_at?: SortOrder
  }

  export type campgroundsAvgOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    facility_id?: SortOrder
    days?: SortOrder
  }

  export type campgroundsMaxOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    park_name?: SortOrder
    facility_id?: SortOrder
    days?: SortOrder
    start_date?: SortOrder
    created_at?: SortOrder
  }

  export type campgroundsMinOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    park_name?: SortOrder
    facility_id?: SortOrder
    days?: SortOrder
    start_date?: SortOrder
    created_at?: SortOrder
  }

  export type campgroundsSumOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    facility_id?: SortOrder
    days?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type DateTimeNullableWithAggregatesFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableWithAggregatesFilter | Date | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedDateTimeNullableFilter
    _max?: NestedDateTimeNullableFilter
  }

  export type IntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type CampgroundsListRelationFilter = {
    every?: campgroundsWhereInput
    some?: campgroundsWhereInput
    none?: campgroundsWhereInput
  }

  export type campgroundsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type usersCountOrderByAggregateInput = {
    id?: SortOrder
    phone?: SortOrder
    created_at?: SortOrder
    active?: SortOrder
  }

  export type usersAvgOrderByAggregateInput = {
    id?: SortOrder
    active?: SortOrder
  }

  export type usersMaxOrderByAggregateInput = {
    id?: SortOrder
    phone?: SortOrder
    created_at?: SortOrder
    active?: SortOrder
  }

  export type usersMinOrderByAggregateInput = {
    id?: SortOrder
    phone?: SortOrder
    created_at?: SortOrder
    active?: SortOrder
  }

  export type usersSumOrderByAggregateInput = {
    id?: SortOrder
    active?: SortOrder
  }

  export type IntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type usersCreateNestedOneWithoutCampgroundsInput = {
    create?: XOR<usersCreateWithoutCampgroundsInput, usersUncheckedCreateWithoutCampgroundsInput>
    connectOrCreate?: usersCreateOrConnectWithoutCampgroundsInput
    connect?: usersWhereUniqueInput
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type usersUpdateOneRequiredWithoutCampgroundsInput = {
    create?: XOR<usersCreateWithoutCampgroundsInput, usersUncheckedCreateWithoutCampgroundsInput>
    connectOrCreate?: usersCreateOrConnectWithoutCampgroundsInput
    upsert?: usersUpsertWithoutCampgroundsInput
    connect?: usersWhereUniqueInput
    update?: XOR<usersUpdateWithoutCampgroundsInput, usersUncheckedUpdateWithoutCampgroundsInput>
  }

  export type campgroundsCreateNestedManyWithoutUsersInput = {
    create?: XOR<Enumerable<campgroundsCreateWithoutUsersInput>, Enumerable<campgroundsUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<campgroundsCreateOrConnectWithoutUsersInput>
    createMany?: campgroundsCreateManyUsersInputEnvelope
    connect?: Enumerable<campgroundsWhereUniqueInput>
  }

  export type campgroundsUncheckedCreateNestedManyWithoutUsersInput = {
    create?: XOR<Enumerable<campgroundsCreateWithoutUsersInput>, Enumerable<campgroundsUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<campgroundsCreateOrConnectWithoutUsersInput>
    createMany?: campgroundsCreateManyUsersInputEnvelope
    connect?: Enumerable<campgroundsWhereUniqueInput>
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type campgroundsUpdateManyWithoutUsersInput = {
    create?: XOR<Enumerable<campgroundsCreateWithoutUsersInput>, Enumerable<campgroundsUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<campgroundsCreateOrConnectWithoutUsersInput>
    upsert?: Enumerable<campgroundsUpsertWithWhereUniqueWithoutUsersInput>
    createMany?: campgroundsCreateManyUsersInputEnvelope
    set?: Enumerable<campgroundsWhereUniqueInput>
    disconnect?: Enumerable<campgroundsWhereUniqueInput>
    delete?: Enumerable<campgroundsWhereUniqueInput>
    connect?: Enumerable<campgroundsWhereUniqueInput>
    update?: Enumerable<campgroundsUpdateWithWhereUniqueWithoutUsersInput>
    updateMany?: Enumerable<campgroundsUpdateManyWithWhereWithoutUsersInput>
    deleteMany?: Enumerable<campgroundsScalarWhereInput>
  }

  export type campgroundsUncheckedUpdateManyWithoutUsersInput = {
    create?: XOR<Enumerable<campgroundsCreateWithoutUsersInput>, Enumerable<campgroundsUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<campgroundsCreateOrConnectWithoutUsersInput>
    upsert?: Enumerable<campgroundsUpsertWithWhereUniqueWithoutUsersInput>
    createMany?: campgroundsCreateManyUsersInputEnvelope
    set?: Enumerable<campgroundsWhereUniqueInput>
    disconnect?: Enumerable<campgroundsWhereUniqueInput>
    delete?: Enumerable<campgroundsWhereUniqueInput>
    connect?: Enumerable<campgroundsWhereUniqueInput>
    update?: Enumerable<campgroundsUpdateWithWhereUniqueWithoutUsersInput>
    updateMany?: Enumerable<campgroundsUpdateManyWithWhereWithoutUsersInput>
    deleteMany?: Enumerable<campgroundsScalarWhereInput>
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedDateTimeNullableFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableFilter | Date | string | null
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedDateTimeNullableWithAggregatesFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableWithAggregatesFilter | Date | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedDateTimeNullableFilter
    _max?: NestedDateTimeNullableFilter
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedIntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type NestedFloatNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableFilter | number | null
  }

  export type usersCreateWithoutCampgroundsInput = {
    phone: string
    created_at?: Date | string | null
    active?: number | null
  }

  export type usersUncheckedCreateWithoutCampgroundsInput = {
    id?: number
    phone: string
    created_at?: Date | string | null
    active?: number | null
  }

  export type usersCreateOrConnectWithoutCampgroundsInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutCampgroundsInput, usersUncheckedCreateWithoutCampgroundsInput>
  }

  export type usersUpsertWithoutCampgroundsInput = {
    update: XOR<usersUpdateWithoutCampgroundsInput, usersUncheckedUpdateWithoutCampgroundsInput>
    create: XOR<usersCreateWithoutCampgroundsInput, usersUncheckedCreateWithoutCampgroundsInput>
  }

  export type usersUpdateWithoutCampgroundsInput = {
    phone?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    active?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type usersUncheckedUpdateWithoutCampgroundsInput = {
    id?: IntFieldUpdateOperationsInput | number
    phone?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    active?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type campgroundsCreateWithoutUsersInput = {
    park_name: string
    facility_id: number
    days: number
    start_date: string
    created_at?: Date | string | null
  }

  export type campgroundsUncheckedCreateWithoutUsersInput = {
    id?: number
    park_name: string
    facility_id: number
    days: number
    start_date: string
    created_at?: Date | string | null
  }

  export type campgroundsCreateOrConnectWithoutUsersInput = {
    where: campgroundsWhereUniqueInput
    create: XOR<campgroundsCreateWithoutUsersInput, campgroundsUncheckedCreateWithoutUsersInput>
  }

  export type campgroundsCreateManyUsersInputEnvelope = {
    data: Enumerable<campgroundsCreateManyUsersInput>
    skipDuplicates?: boolean
  }

  export type campgroundsUpsertWithWhereUniqueWithoutUsersInput = {
    where: campgroundsWhereUniqueInput
    update: XOR<campgroundsUpdateWithoutUsersInput, campgroundsUncheckedUpdateWithoutUsersInput>
    create: XOR<campgroundsCreateWithoutUsersInput, campgroundsUncheckedCreateWithoutUsersInput>
  }

  export type campgroundsUpdateWithWhereUniqueWithoutUsersInput = {
    where: campgroundsWhereUniqueInput
    data: XOR<campgroundsUpdateWithoutUsersInput, campgroundsUncheckedUpdateWithoutUsersInput>
  }

  export type campgroundsUpdateManyWithWhereWithoutUsersInput = {
    where: campgroundsScalarWhereInput
    data: XOR<campgroundsUpdateManyMutationInput, campgroundsUncheckedUpdateManyWithoutCampgroundsInput>
  }

  export type campgroundsScalarWhereInput = {
    AND?: Enumerable<campgroundsScalarWhereInput>
    OR?: Enumerable<campgroundsScalarWhereInput>
    NOT?: Enumerable<campgroundsScalarWhereInput>
    id?: IntFilter | number
    user_id?: IntFilter | number
    park_name?: StringFilter | string
    facility_id?: IntFilter | number
    days?: IntFilter | number
    start_date?: StringFilter | string
    created_at?: DateTimeNullableFilter | Date | string | null
  }

  export type campgroundsCreateManyUsersInput = {
    id?: number
    park_name: string
    facility_id: number
    days: number
    start_date: string
    created_at?: Date | string | null
  }

  export type campgroundsUpdateWithoutUsersInput = {
    park_name?: StringFieldUpdateOperationsInput | string
    facility_id?: IntFieldUpdateOperationsInput | number
    days?: IntFieldUpdateOperationsInput | number
    start_date?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type campgroundsUncheckedUpdateWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    park_name?: StringFieldUpdateOperationsInput | string
    facility_id?: IntFieldUpdateOperationsInput | number
    days?: IntFieldUpdateOperationsInput | number
    start_date?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type campgroundsUncheckedUpdateManyWithoutCampgroundsInput = {
    id?: IntFieldUpdateOperationsInput | number
    park_name?: StringFieldUpdateOperationsInput | string
    facility_id?: IntFieldUpdateOperationsInput | number
    days?: IntFieldUpdateOperationsInput | number
    start_date?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.DMMF.Document;
}